---
title: Monoid patterns
tags: Haskell, monoids, typeclasses
---

### Hey, girl, are you gonna make this, too, about monoids?

## Yes. Yes, I am.

The thing I passionately talk about to anyone who will listen is the algebraic structure known as *monoid.* Monoids are important to me for several reasons, mostly because writing about the `Monoid` typeclass is what finally made me feel like I was *really getting* Haskell itself. `Monoid` helped me understand why Haskell has typeclasses, to approximate algebraic structures. 

It helped me understand types and polymorphism better; most concrete types have more than one possible monoidal operation -- variations on Boolean disjunction/conjunction; set unions and intersections; addition and multiplication -- but at the type level the monoidal operation looks like this:

```haskell
<> :: Monoid a => a -> a -> a
```

What we can know about `a` is only that it is a type that has (at least one) binary associative operation over it and an identity value. That is, it forms *a monoid*, the algebraic structure, by being a set with such an operation. Generally, there will be two standard implementations for this; for some concrete types, there may be more. I like to call this the *polymorphism stack*; parametric polymorphism means there are fewer possible implementations for a given type signature, while concrete types means fewer possibilities for type of input but more possible implementations. Constrained polymorphism, as in the above, is in the middle. 

And this understanding of monoids as algebraic structures led to a coherent understanding of the monoidal ecosystem in Haskell. Applicatives are monoidal functors. Monads, too, have a monoidal quality to them, although it's harder to see. The `Alternative` typeclass: more monoids. Same with `MonadPlus`. Folds are also monoidal in nature, although this also can be hard to see when you look at the type signatures for `foldr` and `foldl`. But the idea that I could understand *all of this* from the foundation of knowing a little Boolean algebra and a little about sets astonished me. 

...

I am by no means an expert on Boolean algebra, set theory, or type theory, but I have been known to go around talking about monoids being conjunctive or disjunctive, and I have been asked to explain myself. 

When I first learned about the `Monoid` typeclass in Haskell, it struck me that most types admit multiple instances. In many cases, the Haskell standard library has one as the default, possibly with one or more alternates, wrapped in `newtype` wrappers to maintain the one-to-one correspondence of typeclass to named type. It further struck me that, although we typically use different operators (defined in the `Num` typeclass, rather than `Monoid`) for the monoidal operations over (most? I don't know) numeric types, the other `Monoid` instances all follow that same basic pattern -- add or multiply, `all` or `any`, concatenate or zip. 

I'm going to try not to get too much into theory in this post. Instead, I'll try to highlight the connections between these things as I saw them. We'll start with some basic facts about Boolean algebra.

## Boolean algebra

I'm going to go ahead and long-quote this definition of a Boolean algebra, for reference:

> A Boolean algebra (BA) is a set A together with binary operations + and · and a unary operation −, and elements 0, 1 of A such that the following laws hold: commutative and associative laws for addition and multiplication, distributive laws both for multiplication over addition and for addition over multiplication, and [some special laws, elided]


So, a Boolean algebra is an algebraic structure, like monoid, but one that has *two* binary associatve operations with identity values, represented by the operators that we may recognize as addition and multiplication operators, respectively. These operations are also known to be commutative, but neither commutativity nor associativity is going to concern us much in this post. Those identity values sure will, though.

As a quick refresher, the Boolean truth tables for conjunction and disjunction look like this:<a name="footnote-mark-1" href="#footnote-1"><sup>1</sup></a>

- conjunction 

|       | False | True  |
|-------|-------|-------|
| False | False | False |
| True  | False | True  |

- disjunction

|       | False | True  |
|-------|-------|-------|
| False | False | True  |
| True  | True  | True  |


When we talk about the identity value for these operations, we recall that something is an identity value if it doesn't change the other value when combined with it, the way adding zero to any number never changes that number. So, for Boolean conjunction, the identity is True: combining True with any other value gives you back that value. If you combine a True with a True, you get True; combine it with a False and get False. For disjunction, the identity is False; whatever you combine False with, you'll get back that other value. 

This corresponds to the Boolean operators `all` and `any`, by the way, and also to the Boolean monoids, frequently called by their newtype wrappers, `All` and `Any` (to do these in your REPL, you'd need to import Data.Monoid to have the types in scope):

```haskell
λ> All False <> All True
All {getAll = False}
it :: All

λ> Any False <> Any True
Any {getAny = True}
it :: Any
```



# But what if it's `Maybe`?

- conjunction 

|         | Nothing | Just a  |
|---------|---------|---------|
| Nothing | Nothing | Nothing |
| Just a  | Nothing | Just a  |

- the `Just a` could be a choice of one or a combination of the two `a` values
- error propagating: possibly this isn't what you want
- but it is what you get in the `Maybe` applicative!

```haskell
λ> Just (*8) <*> Nothing
Nothing
```

- disjunction

|         | Nothing | Just a  |
|---------|---------|---------|
| Nothing | Nothing | Just a  |
| Just a  | Just a  | Just a  |







λ> import Control.Applicative

λ> (ZipList [(+1), (*3)]) <*> (ZipList [4, 5])
ZipList {getZipList = [5,15]}
it :: Num b => ZipList b

λ> (ZipList [(+1), (*3)]) <*> (ZipList [])
ZipList {getZipList = []}
it :: Num b => ZipList b

λ> :t zip
zip :: [a] -> [b] -> [(a, b)]

λ> zip [1, 2, 3] []
[]
it :: Num a => [(a, b)]


move this to the post about monad:

λ> :type (>>=) @Maybe
(>>=) @Maybe :: Maybe a -> (a -> Maybe b) -> Maybe b
<a name="footnote-1" href="#footnote-mark-1"><sup>1</sup></a> For our present purposes, we don't need to think about exclusive disjunction (`xor`), although when you look at *types* as a monoidal category, sum types themselves seem to represent exclusive disjunction, not inclusive. 