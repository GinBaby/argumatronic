# Blog posts

## Higher-kinded monoids

There is a dissimilarity between list concatenation and addition in that lists are a type constructor. It turns out not to matter much to the list monoid because we can concatenate for free without caring at all about what the `a` values are. But this isn't true of other higher-kinded monoids.

Applicative and Monad are monoids (of a sort -- if we don't care too much about `join` not *quite* being a binary operation) of type constructors but where they monoid the type constructors -- like what the Maybe monoid does when there are two `Just` values but with applicative and monad, one `a` is a function and instead of mappending them, the function applies to the other `a.`

The incoherence of the maybe monoids.

Alternative is a disjunctive monoid that can't touch the `a` in Maybe a.

## Verb as typeclass




## Installing NixOS




## Hakyll: what it do and how





# Code projects (annotate and turn them into writings) -- probably all of these will go to typeclasses.com

## Roguelike

## twitterbots

## ppl


# books for the curious nonprogrammer or beginning programmer

- How Software Works
- Once Upon an Algorithm
- BubbleSort zines
- The Bug by Ellen Ullman
- Lauren Ipsum and CS Unplugged for the much younger
- related:  baseCS and imposter's handbook
